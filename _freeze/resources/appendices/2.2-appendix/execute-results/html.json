{
  "hash": "7c6bf7df2a3fe9939fa4dc41229288c3",
  "result": {
    "markdown": "---\ntitle: \"2.2 — Random Variables & Distributions — Appendix\"\nexecute:\n  freeze: auto\npage-layout: full\n---\n\n\n\n\n## Properties of Expected Value and Variance\n\nThere are several useful mathematical properties of expected value and variance.\n\n**Property 1**: the expected value of a constant is itself, and the variance of a constant is 0.\n\n\\begin{align*}\nE(c)&=c\\\\\nvar(c)&=0\\\\\nsd(c)&=0\\\\\n\\end{align*}\n\nFor any constant, $c$\n\n- Example: $E(2)=2$, $var(2)=0$, $sd(2)=0$\n\n**Property 2**: adding or subtracting a constant to a random variable and then taking the mean or variance:\n\n\\begin{align*}\nE(X \\pm c)&=E(X) \\pm c\\\\\nvar(X \\pm c)&=X\\\\\nsd(X \\pm c)&=X\\\\\n\\end{align*}\n\nFor any constant, $c$\n\n- Example: $E(2+X)=2+E(X)$, $var(2+X)=var(X)$, $sd(2+X)=sd(X)$\n\n**Property 3**: multiplying a constant to a random variable and then taking the mean or variance:\n\n\\begin{align*}\nE(aX)&=E(X) aE(X)\\\\\nvar(aX)&=a^2var(X)\\\\\nsd(aX)&=|a|sd(X)\\\\\n\\end{align*}\n\nFor any constant, $a$\n\n- Example: $E(2X)=2E(X)$, $var(2X)=4var(X)$, $sd(2X)=2sd(X)$\n\n**Property 4**: the expected value of the sum of two random variables is equal to the sum of each random variable's expected value:\n\n\n$$E(X \\pm Y)=E(X) \\pm E(Y)$$\n\n\n## Creating Mathematical Functions in R\n\nYou can create custom mathematical functions using mosaic by defining an R `function()` with multiple arguments. As a simple example, make the function $f(x) = 10x-x^2$ (with one argument, $x$ since it is a univariate function) as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# store as a named function, I'll call it \"my_function\"\nmy_function <- function(x){10*x - x^2}\n\n# look at it\nmy_function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(x){10*x - x^2}\n```\n:::\n:::\n\n\nThere are some notational requirements from `R` for making functions. Any coefficient in front of a variable (such as the 10 in `10x` must be explicitly multiplied by the variable, as in `10*x`).\n\nTo *use* the function to calculate its value at a particular value of `x`, simply define what the `(x)` is and run your named function on it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# f of 2 \nmy_function(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n\n```{.r .cell-code}\n# f of 2 and 4\nmy_function(c(2,4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16 24\n```\n:::\n\n```{.r .cell-code}\n# f of 2 through 7\nmy_function(2:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16 21 24 25 24 21\n```\n:::\n\n```{.r .cell-code}\n# ALTERNATIVELY\n# define x first as a vector and then run function on it\n\nx <- c(2,4)\nmy_function(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16 24\n```\n:::\n:::\n\n\n## Graphing Mathematical and Statistical Functions in R\n\nIn `ggplot` there is a dedicated `stat_function()` (equivalent to a `geom_` layer) to graph mathematical and statistical functions. All that is needed is a `data.frame` of a range of `x` values to act as the source for `data`, and set `x` equal to those values for `aes`thetics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# x values are integers 1 through 10\nggplot(data = tibble(x = 1:10))+\n  aes(x = x)\n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThen we add the `stat_function`, where `fun =` is the most important argument where you define the to function to graph as your function created above, for example, our `my_function`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = 1:10))+\n  aes(x = x)+\n  stat_function(fun = my_function) \n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nYou can also adjust things like size, color, and line type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = 1:10))+\n  aes(x = x)+\n  stat_function(fun = my_function,\n                color = \"blue\",\n                size = 2,\n                linetype = \"dashed\") \n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Bult-in Statistical Functions\n\nThere are some standard statistical distributions built into R. They require a combination of a specific prefix and a distribution. \n\n**Prefixes**:\n\n| Action/Type | Prefix |\n|--------|--------|\n| random draw | `r` |\n| density (pdf) | `d` |  \n| cumulative density (cdf)    | `p`    |\n| quantile (inverse cdf) | `q` |\n\n**Distributions**:\n\n| Distribution | Name in R |\n|--------|--------|\n| Normal | `norm` |\n| Uniform | `unif` |  \n| Student's t    | `t`    |\n| Binomial    | `binom`    |\n| Negative binomial    | `nbinom`    |\n| Hypergeometric    | `hyper`    |\n| Weibull    | `weibull`    |\n| Beta    | `beta`    |\n| Gamma    | `gamma`    |\n\nThus, what you want is a combination of the prefix and the distribution.\n\n### Some common examples:\n\n1. Take random draws from a normal distribution: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 10, # take 10 draws from a normal distribution with:\n      mean = 2, # mean of 2\n      sd = 1) # sd of 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3.4582468 2.0740456 0.9092114 1.1790483 2.1474758 3.0726526 3.6894126\n [8] 3.0430861 1.9429537 0.5569242\n```\n:::\n:::\n\n\n2. Get probability of a random variable being less than or equal to a value (cdf) from a normal distribution: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find probability of area to the LEFT of a number on pdf (note this = cdf of that number!)\npnorm(q = 80, # number is 80 from a distribution where: \n      mean = 200, # mean is 100\n      sd = 100, # sd is 100\n      lower.tail = TRUE) # looking to the LEFT in lower tail\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1150697\n```\n:::\n:::\n\n\n3. Find the value of a distribution that is a specified percentile. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the 38th percentile value\nqnorm(p = 0.38, # 38th percentile from a distribution where:\n      mean = 200, # mean is 200\n      sd = 100) # sd is 100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 169.4519\n```\n:::\n:::\n\n\n### Graphing Statistical Functions\n\nYou can also graph these commonly used statistical functions by setting `fun = ` the named functions in your `stat_function()` layer. If you want to specify the mean and standard deviation, use `args = list()` to include the required arguments from the named function above (e.g. `dnorm` needs `mean` and `sd`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = -400:600))+\n  aes(x = x)+\n  stat_function(fun = dnorm,\n                args = list(mean = 200, sd = 200),\n                color = \"blue\",\n                size = 2,\n                linetype = \"dashed\") \n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIf you don't include this, it will graph the standard distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = -4:4))+\n  aes(x = x)+\n  stat_function(fun = dnorm,\n                color = \"blue\",\n                size = 2,\n                linetype = \"dashed\") \n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nTo add shading under a distribution, simply add a duplicate of the `stat_function()` layer, but add `geom=\"area\"` to indicate the area beneath the function should be filled, and you can limit the domain of the `fill` with `xlim=c(start,end)`, where `start` and `end` are the x-values for the endpoints of the `fill.`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# graph normal distribution and shade area between -2 and 2\nggplot(data = tibble(x = -4:4))+\n  aes(x = x)+\n  # graph the curve\n  stat_function(fun = dnorm,\n                color = \"blue\",\n                size = 2,\n                linetype = \"dashed\")+\n  # shade area under curve (between -2 and 2)\n  stat_function(fun = dnorm,\n                xlim = c(-2,2),\n                geom = \"area\",\n                fill = \"green\",\n                alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nHence, here is one graph from my slides:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x=35:115))+\n  aes(x = x)+\n  stat_function(fun = dnorm,\n                args = list(mean = 75, sd = 10),\n                geom = \"area\",\n                size = 2,\n                fill = \"gray\",\n                alpha = 0.5)+\n  stat_function(fun = dnorm,\n                args = list(mean = 75, sd = 10),\n                geom = \"area\",\n                xlim = c(65,85),\n                fill = \"#e64173\")+\n  labs(x = \"X\",\n       y = \"Probability\")+\n  scale_x_continuous(breaks = seq(35,115,5))+\n    scale_y_continuous(limits = c(0,0.045),\n                     expand = c(0,0))+\n  theme_classic(base_family = \"Fira Sans Condensed\",\n           base_size = 20)\n```\n\n::: {.cell-output-display}\n![](2.2-appendix_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::",
    "supporting": [
      "2.2-appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}